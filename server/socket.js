const logger = require(__basedir + '/config/winston');
const {production} = require('../../config/local.json');

module.exports = async function(io, pool) {

  const nsp = io.of('/app')

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è namespace —Å—Ç—Ä–∞–Ω–∏—Ü
  const pageNamespaces = {};

  //–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ë–î
  const getPages = async() => {
    const sqlQ = `select id from dbo.dict where id_type = 9`
    try {
      const result = await pool.query(sqlQ);
      return result.rows.map(row => row.id)
    }
    catch (err) {
      console.log(err);
      return []
    }
  }

  //–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è namespace –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const createPageNamespace = (pageId) => {

    const namespaceName = `/page_${pageId}`;
    pageNamespaces[pageId] = io.of(namespaceName);

    pageNamespaces[pageId].on('connection', (socket) => {
      // if (production) {
        socket.on('session_start', async ({uid, page_id}) => {
          console.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}`);
          await startSession(socket.id, uid, page_id)
        })

        socket.on('session_end', async () => {
          console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}`);
          await endSession(socket.id);
        });

        socket.on('disconnect', async () => {
          console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}`);
          await endSession(socket.id);
        });
      // }
    });

    return pageNamespaces[pageId];
  };

  //–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è nsp –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const createPagesNamespaces = async() => {
    try {
      const pages = await getPages();
      console.log('–ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ë–î:', pages);

      pages.forEach(id => {
        createPageNamespace(id);
      });

      console.log(`–°–æ–∑–¥–∞–Ω–æ ${pages.length} namespace –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ namespace:', error);
    }
  }

  createPagesNamespaces()

  async function startSession(socket_id, uid, page_id) {
    const sqlQ = `INSERT INTO dbo.user_visits(socket_id, user_id, page_id, entry_time) values ($1, $2, $3, now())`;
    const values = [socket_id, uid, page_id]

    try {
      await pool.query(sqlQ, values);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –±–¥:', err);
    }
  }

  async function endSession(socket_id) {

    const sqlQ = `UPDATE dbo.user_visits SET exit_time = NOW(), is_active = FALSE
                WHERE socket_id = $1 and is_active = TRUE`;
    const values = [socket_id]

    try {
      await pool.query(sqlQ, values);
    }
    catch (err) {
      console.log(err);
    }
  }

  socket.on('connection', (socket) => {

    socket.on('reboot_server', async (data) => {

        console.log('MESSAGE REBOOT SERVER')
        console.log(data)

        const { pages, message, level } = data;

        pages.forEach(pageId => {
          const pageNsp = pageNamespaces[pageId];
          pageNsp.emit('reboot_server', { message, level });
          console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ namespace —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}`);
        });

      })

    socket.on('disconnect', async () => {
        // console.log('–°–æ–∫–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–æ')
      })

  })

}